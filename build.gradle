plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
}

group = property("group")
version = property("version")

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:${property("paperVersion")}-R0.1-SNAPSHOT")
    implementation("io.github.R2turnTrue:chzzk4j:0.1.1") // chzzk4j
}

// shade 설정: implementation에 있는 의존성을 포함할 configuration 생성
def shade = configurations.create("shade")
shade.extendsFrom(configurations.implementation)

tasks {
    runServer {
        minecraftVersion("1.21")
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

// fat jar 구성: shade에 포함된 라이브러리의 zipTree 내용을 jar에 통합
jar {
    from(shade.collect { it.isDirectory() ? it : zipTree(it) })
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}